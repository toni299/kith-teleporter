name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Generate CHANGELOG
        id: changelog
        run: |
          npm install -g conventional-changelog-cli
          conventional-changelog -p angular -i CHANGELOG.md -s -r 0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update version in module.json
        run: |
          VERSION=$(echo "${GITHUB_REF}" | sed -e 's/^refs\/tags\///')
          DOWNLOAD_URL="https://github.com/${{ github.repository }}/releases/download/${VERSION}/kith-teleporter.zip"
          jq --arg version "$VERSION" --arg download "$DOWNLOAD_URL" '.version=$version | .download=$download' module.json > tmp.$$.json && mv tmp.$$.json module.json

      - name: Create temporary branch and commit changes
        run: |
          BRANCH_NAME="update-changelog-$(date +%s)"
          git checkout -b $BRANCH_NAME
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md module.json
          git commit -m "chore: update changelog and module version"
          git push --set-upstream origin $BRANCH_NAME
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create pull request
        id: create_pr
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update changelog and module version"
          branch: ${{ env.BRANCH_NAME }}
          title: "Update changelog and module version"
          body: "This PR updates the changelog and module version."
          base: master

      - name: Merge pull request
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = await github.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${{ github.actor }}:${{ env.BRANCH_NAME }}`,
              state: 'open'
            });
            if (pr.data.length > 0) {
              await github.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.data[0].number,
                merge_method: 'squash'
              });
            } else {
              throw new Error("Pull request not found");
            }

      - name: Create Zip File
        run: |
          zip -r kith-teleporter.zip . -x ".git/*" -x ".github/*" -x "node_modules/*" -x "package-lock.json" -x "package.json"

      - name: Force push tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME=$(echo "${GITHUB_REF}" | sed -e 's/^refs\/tags\///')
          git tag -d $TAG_NAME || true
          git tag $TAG_NAME
          git push origin :refs/tags/$TAG_NAME || true
          git push origin $TAG_NAME

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: |
            Release notes for ${{ github.ref }}.
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./kith-teleporter.zip
          asset_name: kith-teleporter.zip
          asset_content_type: application/zip
